<section id="StoreLocator-{{ section.id }}" class="store-locator-section">
  <div class="page-width">
    {%- if section.settings.heading != blank -%}
      <h2 class="store-locator-section__heading">{{ section.settings.heading }}</h2>
    {%- endif -%}
    {%- if section.settings.intro_text != blank -%}
      <div class="store-locator-section__intro rte">{{ section.settings.intro_text }}</div>
    {%- endif -%}
    <div class="store-locator">
      <div class="store-locator__search search-section">
        {%- if section.settings.enable_search -%}
          <label class="visually-hidden" for="StoreLocatorSearch-{{ section.id }}">{{ section.settings.search_placeholder | default: 'Search by city or pin...' }}</label>
          <input
            type="search"
            id="StoreLocatorSearch-{{ section.id }}"
            class="search-input"
            placeholder="{{ section.settings.search_placeholder | default: 'Search by city or pin...' }}"
            data-store-search>
        {%- endif -%}
        <div
          id="StoreLocatorList-{{ section.id }}"
          class="store-list"
          data-store-list
          data-empty-message="{{ 'No stores match your search right now.' | escape }}"></div>
      </div>
      <div
        id="StoreLocatorMap-{{ section.id }}"
        class="store-map"
        data-map
        data-map-missing="{{ 'Add a Google Maps API key to enable the map.' | escape }}"></div>
    </div>
  </div>

  <script type="application/json" id="StoreLocatorData-{{ section.id }}" data-store-json>
    [
      {%- for block in section.blocks -%}
        {
          "block_id": {{ block.id | json }},
          "name": {{ block.settings.store_name | json }},
          "address": {{ block.settings.address | json }},
          "city": {{ block.settings.city | json }},
          "state": {{ block.settings.state | json }},
          "postal_code": {{ block.settings.postal_code | json }},
          "phone": {{ block.settings.phone | json }},
          "latitude": {{ block.settings.latitude | json }},
          "longitude": {{ block.settings.longitude | json }},
          "custom_map_link": {{ block.settings.custom_map_link | json }}
        }{%- unless forloop.last -%},{%- endunless -%}
      {%- endfor -%}
    ]
  </script>

  <style>
    #StoreLocator-{{ section.id }} .store-locator {
      display: grid;
      grid-template-columns: minmax(0, 1fr) minmax(0, 2fr);
      gap: 20px;
      margin-bottom: 35px;
    }

    #StoreLocator-{{ section.id }} .store-locator__search {
      display: flex;
      flex-direction: column;
    }

    #StoreLocator-{{ section.id }} .search-input {
      width: 100%;
      padding: 10px;
      margin-bottom: 20px;
    }

    #StoreLocator-{{ section.id }} .store-list {
      max-height: 440px;
      overflow-y: auto;
      border: 1px solid #eee;
      padding: 10px;
    }

    #StoreLocator-{{ section.id }} .store-card {
      padding: 10px;
      border-bottom: 1px solid #eee;
      cursor: pointer;
    }

    #StoreLocator-{{ section.id }} .store-card:last-child {
      border-bottom: none;
    }

    #StoreLocator-{{ section.id }} .store-card:focus {
      outline: 2px solid #004e91;
      outline-offset: 2px;
    }

    #StoreLocator-{{ section.id }} .store-card__name {
      display: block;
      font-weight: 600;
      margin-bottom: 5px;
    }

    #StoreLocator-{{ section.id }} .store-card__address {
      margin-bottom: 4px;
      white-space: pre-line;
    }

    #StoreLocator-{{ section.id }} .store-card__locality {
      margin-bottom: 4px;
      color: #555;
    }

    #StoreLocator-{{ section.id }} .store-card__phone a {
      color: inherit;
      text-decoration: none;
    }

    #StoreLocator-{{ section.id }} .store-card__phone a:hover,
    #StoreLocator-{{ section.id }} .store-card__phone a:focus {
      text-decoration: underline;
    }

    #StoreLocator-{{ section.id }} .store-map {
      min-height: 320px;
      height: 500px;
      width: 100%;
      background: #f2f2f2;
    }

    #StoreLocator-{{ section.id }} .store-map__message {
      padding: 20px;
      color: #555;
    }

    #StoreLocator-{{ section.id }} .get-dir {
      font-size: 16px;
      font-weight: 500;
      font-family: inherit;
      color: #fff;
      background: {{ section.settings.button_color | default: '#004e91' }};
      padding: 10px 20px;
      border-radius: 30px;
      margin-top: 10px;
      border: none;
      transition: transform 0.2s ease-in-out;
    }

    #StoreLocator-{{ section.id }} .get-dir:hover,
    #StoreLocator-{{ section.id }} .get-dir:focus {
      transform: scale(1.03);
    }

    #StoreLocator-{{ section.id }} .store-locator-section__heading {
      text-align: center;
      margin-bottom: 20px;
    }

    #StoreLocator-{{ section.id }} .store-locator-section__intro {
      text-align: center;
      margin-bottom: 30px;
    }

    #StoreLocator-{{ section.id }} .store-locator__empty {
      margin: 0;
      color: #555;
    }

    #StoreLocator-{{ section.id }} .visually-hidden {
      position: absolute !important;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      white-space: nowrap;
      border: 0;
    }

    @media (max-width: 768px) {
      #StoreLocator-{{ section.id }} .store-locator {
        display: flex;
        flex-direction: column;
      }

      #StoreLocator-{{ section.id }} .store-map {
        order: -1;
        margin-bottom: 20px;
      }
    }
  </style>

  <script>
    (function() {
      const sectionId = {{ section.id | json }};
      const container = document.getElementById('StoreLocator-' + sectionId);
      if (!container) {
        return;
      }

      const dataEl = document.getElementById('StoreLocatorData-' + sectionId);
      let stores = [];

      if (dataEl) {
        try {
          stores = JSON.parse(dataEl.textContent);
        } catch (error) {
          console.error('Store locator: failed to parse store data', error);
        }
      }

      function parseNumber(value) {
        if (value === null || value === '' || typeof value === 'undefined') {
          return null;
        }
        const number = Number(value);
        return Number.isFinite(number) ? number : null;
      }

      const defaultLatSetting = parseNumber({{ section.settings.default_latitude | json }});
      const defaultLngSetting = parseNumber({{ section.settings.default_longitude | json }});
      const googleApiKeySetting = {{ section.settings.google_maps_api_key | json }};
      const googleApiKey = typeof googleApiKeySetting === 'string' ? googleApiKeySetting.trim() : '';
      const routesApiKeySetting = {{ section.settings.google_routes_api_key | json }};
      const directionsApiKey = typeof routesApiKeySetting === 'string' && routesApiKeySetting.trim() ? routesApiKeySetting.trim() : googleApiKey;
      const directionsLabelSetting = {{ section.settings.directions_label | json }};
      const directionsLabel = typeof directionsLabelSetting === 'string' && directionsLabelSetting.trim() ? directionsLabelSetting : 'Get directions';

      const listEl = container.querySelector('[data-store-list]');
      const searchEl = container.querySelector('[data-store-search]');
      const mapEl = container.querySelector('[data-map]');
      const emptyMessage = listEl ? (listEl.getAttribute('data-empty-message') || 'No stores available yet.') : 'No stores available yet.';
      const mapMissingMessage = mapEl ? (mapEl.getAttribute('data-map-missing') || 'Set a Google Maps API key to enable the map.') : '';

      stores = stores.map(function(store) {
        const latitudeNumber = parseNumber(store.latitude);
        const longitudeNumber = parseNumber(store.longitude);
        const searchTokens = [
          store.name,
          store.address,
          store.city,
          store.state,
          store.postal_code,
          store.phone
        ]
          .filter(Boolean)
          .join(' ')
          .toLowerCase();
        return Object.assign({}, store, {
          latitudeNumber: latitudeNumber,
          longitudeNumber: longitudeNumber,
          searchTokens: searchTokens
        });
      });

      let filteredStores = stores.slice();
      let mapInstance = null;
      let markers = [];
      let userLocation = null;
      let routePolyline = null;

      renderStores(filteredStores);

      if (searchEl) {
        searchEl.addEventListener('input', function(event) {
          filteredStores = filterStores(event.target.value);
          renderStores(filteredStores);
        });
      }

      if (!mapEl) {
        return;
      }

      if (!googleApiKey) {
        if (mapMissingMessage) {
          mapEl.innerHTML = '<p class="store-map__message">' + mapMissingMessage + '</p>';
        }
        return;
      }

      onGoogleMapsReady(initializeMap);

      function filterStores(value) {
        if (!value) {
          return stores;
        }
        const terms = value
          .toLowerCase()
          .split(/\s+/)
          .filter(function(term) {
            return term.length > 0;
          });
        if (!terms.length) {
          return stores;
        }
        return stores.filter(function(store) {
          return terms.every(function(term) {
            return store.searchTokens.indexOf(term) !== -1;
          });
        });
      }

      function renderStores(data) {
        renderList(data);
        if (mapInstance) {
          renderMarkers(data);
        }
      }

      function renderList(data) {
        if (!listEl) {
          return;
        }
        if (!data.length) {
          listEl.innerHTML = '<p class="store-locator__empty">' + emptyMessage + '</p>';
          return;
        }
        const fragment = document.createDocumentFragment();
        data.forEach(function(store) {
          const card = document.createElement('article');
          card.className = 'store-card';
          card.tabIndex = 0;
          card.dataset.storeId = store.block_id;

          const nameEl = document.createElement('strong');
          nameEl.className = 'store-card__name';
          nameEl.textContent = store.name || '';
          card.appendChild(nameEl);

          if (store.address) {
            const addressEl = document.createElement('div');
            addressEl.className = 'store-card__address';
            addressEl.textContent = store.address;
            card.appendChild(addressEl);
          }

          const localityParts = [];
          if (store.city) {
            localityParts.push(store.city);
          }
          if (store.postal_code) {
            localityParts.push(store.postal_code);
          }
          if (localityParts.length) {
            const localityEl = document.createElement('div');
            localityEl.className = 'store-card__locality';
            localityEl.textContent = localityParts.join(' - ');
            card.appendChild(localityEl);
          }

          if (store.phone) {
            const phoneEl = document.createElement('div');
            phoneEl.className = 'store-card__phone';
            const cleanedPhone = store.phone.replace(/[^\d+]/g, '');
            if (cleanedPhone) {
              const phoneLink = document.createElement('a');
              phoneLink.href = 'tel:' + cleanedPhone;
              phoneLink.textContent = store.phone;
              phoneEl.appendChild(phoneLink);
            } else {
              const phoneText = document.createElement('span');
              phoneText.textContent = store.phone;
              phoneEl.appendChild(phoneText);
            }
            card.appendChild(phoneEl);
          }

          const directionsUrl = store.custom_map_link && store.custom_map_link.trim()
            ? store.custom_map_link
            : createGoogleMapsLink(store.latitudeNumber, store.longitudeNumber);

          if (directionsUrl) {
            const button = document.createElement('button');
            button.type = 'button';
            button.className = 'get-dir';
            button.textContent = directionsLabel;
            button.addEventListener('click', function(event) {
              event.stopPropagation();
              const newWindow = window.open(directionsUrl, '_blank');
              if (newWindow) {
                newWindow.opener = null;
              }
            });
            card.appendChild(button);
          }

          function focusStoreCard() {
            focusStore(store);
          }

          card.addEventListener('click', focusStoreCard);
          card.addEventListener('keyup', function(event) {
            if (event.key === 'Enter' || event.key === ' ') {
              event.preventDefault();
              focusStoreCard();
            }
          });

          fragment.appendChild(card);
        });
        listEl.innerHTML = '';
        listEl.appendChild(fragment);
      }

      function focusStore(store) {
        if (mapInstance && store.latitudeNumber !== null && store.longitudeNumber !== null) {
          mapInstance.setCenter({ lat: store.latitudeNumber, lng: store.longitudeNumber });
          mapInstance.setZoom(14);
        }
        if (userLocation && store.latitudeNumber !== null && store.longitudeNumber !== null) {
          drawRoute(userLocation, { lat: store.latitudeNumber, lng: store.longitudeNumber });
        }
      }

      function renderMarkers(data) {
        markers.forEach(function(marker) {
          marker.setMap(null);
        });
        markers = [];

        data.forEach(function(store) {
          if (store.latitudeNumber === null || store.longitudeNumber === null) {
            return;
          }
          const marker = new google.maps.Marker({
            position: { lat: store.latitudeNumber, lng: store.longitudeNumber },
            map: mapInstance,
            title: store.name || ''
          });
          marker.addListener('click', function() {
            focusStore(store);
          });
          markers.push(marker);
        });
      }

      function createGoogleMapsLink(lat, lng) {
        if (lat === null || lng === null) {
          return '';
        }
        return 'https://www.google.com/maps?q=' + encodeURIComponent(lat + ',' + lng);
      }

      function getDefaultCenter() {
        if (defaultLatSetting !== null && defaultLngSetting !== null) {
          return { lat: defaultLatSetting, lng: defaultLngSetting };
        }
        for (var i = 0; i < stores.length; i += 1) {
          if (stores[i].latitudeNumber !== null && stores[i].longitudeNumber !== null) {
            return { lat: stores[i].latitudeNumber, lng: stores[i].longitudeNumber };
          }
        }
        return { lat: 20.5937, lng: 78.9629 };
      }

      function initializeMap() {
        if (!mapEl) {
          return;
        }
        mapEl.innerHTML = '';
        mapInstance = new google.maps.Map(mapEl, {
          center: getDefaultCenter(),
          zoom: stores.length ? 10 : 5
        });

        if (filteredStores.length) {
          renderMarkers(filteredStores);
        }

        if ('geolocation' in navigator) {
          navigator.geolocation.getCurrentPosition(
            function(position) {
              userLocation = {
                lat: position.coords.latitude,
                lng: position.coords.longitude
              };
              if (mapInstance) {
                mapInstance.setCenter(userLocation);
              }
            },
            function() {
              userLocation = null;
            },
            { enableHighAccuracy: true, timeout: 10000 }
          );
        }
      }

      function drawRoute(origin, destination) {
        if (!directionsApiKey || !mapInstance || !origin || !destination) {
          return;
        }
        fetch('https://routes.googleapis.com/directions/v2:computeRoutes', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Goog-Api-Key': directionsApiKey,
            'X-Goog-FieldMask': 'routes.polyline.encodedPolyline'
          },
          body: JSON.stringify({
            origin: {
              location: { latLng: { latitude: origin.lat, longitude: origin.lng } }
            },
            destination: {
              location: { latLng: { latitude: destination.lat, longitude: destination.lng } }
            },
            travelMode: 'DRIVE',
            routingPreference: 'TRAFFIC_AWARE'
          })
        })
          .then(function(response) {
            if (!response.ok) {
              throw new Error('Routes API error: ' + response.status);
            }
            return response.json();
          })
          .then(function(data) {
            const route = data.routes && data.routes[0];
            if (!route || !route.polyline || !route.polyline.encodedPolyline) {
              return;
            }
            if (!google.maps.geometry || !google.maps.geometry.encoding) {
              return;
            }
            const path = google.maps.geometry.encoding.decodePath(route.polyline.encodedPolyline);
            if (routePolyline) {
              routePolyline.setMap(null);
            }
            routePolyline = new google.maps.Polyline({
              path: path,
              geodesic: true,
              strokeColor: '#4285F4',
              strokeOpacity: 0.8,
              strokeWeight: 4,
              map: mapInstance
            });
            const bounds = new google.maps.LatLngBounds();
            path.forEach(function(point) {
              bounds.extend(point);
            });
            bounds.extend(new google.maps.LatLng(origin.lat, origin.lng));
            bounds.extend(new google.maps.LatLng(destination.lat, destination.lng));
            mapInstance.fitBounds(bounds);
          })
          .catch(function(error) {
            console.error('Store locator: unable to draw route', error);
          });
      }

      function onGoogleMapsReady(callback) {
        if (window.google && window.google.maps) {
          callback();
          return;
        }

        window.__storeLocatorCallbacks = window.__storeLocatorCallbacks || [];
        window.__storeLocatorCallbacks.push(callback);

        if (window.__storeLocatorLoading) {
          return;
        }

        window.__storeLocatorLoading = true;
        window.__storeLocatorGoogleApiKey = googleApiKey;

        var script = document.createElement('script');
        script.src = 'https://maps.googleapis.com/maps/api/js?key=' + encodeURIComponent(googleApiKey) + '&libraries=geometry,places&callback=__onStoreLocatorGoogleMapsReady';
        script.async = true;
        script.defer = true;
        document.head.appendChild(script);

        window.__onStoreLocatorGoogleMapsReady = function() {
          var callbacks = window.__storeLocatorCallbacks || [];
          callbacks.forEach(function(fn) {
            try {
              fn();
            } catch (error) {
              console.error('Store locator: callback error', error);
            }
          });
          window.__storeLocatorCallbacks = [];
        };
      }
    })();
  </script>
</section>

{% schema %}
{
  "name": "Store locator",
  "tag": "section",
  "class": "section store-locator-section",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Locate a store"
    },
    {
      "type": "textarea",
      "id": "intro_text",
      "label": "Intro text"
    },
    {
      "type": "checkbox",
      "id": "enable_search",
      "label": "Enable search",
      "default": true
    },
    {
      "type": "text",
      "id": "search_placeholder",
      "label": "Search placeholder",
      "default": "Search by city or pin..."
    },
    {
      "type": "text",
      "id": "directions_label",
      "label": "Directions button label",
      "default": "Get directions"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button color",
      "default": "#004e91"
    },
    {
      "type": "text",
      "id": "google_maps_api_key",
      "label": "Google Maps API key"
    },
    {
      "type": "text",
      "id": "google_routes_api_key",
      "label": "Google Routes API key",
      "info": "Optional. Uses the Maps API key if left blank."
    },
    {
      "type": "text",
      "id": "default_latitude",
      "label": "Default latitude",
      "info": "Used when stores do not have coordinates."
    },
    {
      "type": "text",
      "id": "default_longitude",
      "label": "Default longitude",
      "info": "Used when stores do not have coordinates."
    }
  ],
  "blocks": [
    {
      "type": "store",
      "name": "Store",
      "settings": [
        {
          "type": "text",
          "id": "store_name",
          "label": "Store name"
        },
        {
          "type": "textarea",
          "id": "address",
          "label": "Address"
        },
        {
          "type": "text",
          "id": "city",
          "label": "City"
        },
        {
          "type": "text",
          "id": "state",
          "label": "State / Province"
        },
        {
          "type": "text",
          "id": "postal_code",
          "label": "Postal / ZIP code"
        },
        {
          "type": "text",
          "id": "phone",
          "label": "Phone number"
        },
        {
          "type": "text",
          "id": "latitude",
          "label": "Latitude"
        },
        {
          "type": "text",
          "id": "longitude",
          "label": "Longitude"
        },
        {
          "type": "text",
          "id": "custom_map_link",
          "label": "Custom map link",
          "info": "Overrides the generated Google Maps link when provided."
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Store locator",
      "blocks": [
        {
          "type": "store",
          "settings": {
            "store_name": "Prakash Ceramics - Siddapura",
            "address": "No 647, Whitefield Main Rd, nearby Cloudnine Hospital, Palm Meadows, Siddapura, Whitefield, Bengaluru, Karnataka 560066",
            "city": "Bengaluru",
            "state": "Karnataka",
            "postal_code": "560066",
            "phone": "9916120060",
            "latitude": "12.969807",
            "longitude": "77.749962",
            "custom_map_link": ""
          }
        },
        {
          "type": "store",
          "settings": {
            "store_name": "METRO HARDWARE ELECTRICALS AND PLYWOOD - MULSHI",
            "address": "147/5/A, MAAN, MULSHI, PUNE PUNE-412115 IN",
            "city": "Pune",
            "state": "Maharashtra ",
            "postal_code": "412115",
            "phone": "8888196488",
            "latitude": "18.573179300465984",
            "longitude": "73.6936815254776",
            "custom_map_link": ""
          }
        }
      ]
    }
  ]

}
{% endschema %}

